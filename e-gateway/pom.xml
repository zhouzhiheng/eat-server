<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.opsigte</groupId>
    <artifactId>e-common-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <relativePath>../e-common-parent</relativePath>
  </parent>

  <artifactId>e-gateway</artifactId>
  <version>${e-gateway.version}</version>
  <packaging>war</packaging>
  <name>e-gateway</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
  </properties>

  <!--只打包一个配置文件properties-->
  <profiles>
    <!--开发环境-->
    <profile>
      <id>dev</id>
      <properties>
        <profileActive>dev</profileActive>
      </properties>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
    </profile>
    <!--测试环境-->
    <profile>
      <id>test</id>
      <properties>
        <profileActive>test</profileActive>
      </properties>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
    </profile>
    <!--生产环境-->
    <profile>
      <id>prod</id>
      <properties>
        <profileActive>prod</profileActive>
      </properties>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
    </profile>
  </profiles>


  <build>
    <!--maven package时,指定生成的文件名称.默认后面有版本号-->
    <finalName>${project.artifactId}</finalName>

    <resources>
      <!--加载多环境配置,只打包某个环境下的配置文件-->
      <resource>
        <filtering>true</filtering>
        <directory>src/main/resources</directory>
        <!--排除所有的配置-->
        <excludes>
          <exclude>application-dev.properties</exclude>
          <exclude>application-test.properties</exclude>
          <exclude>application-prod.properties</exclude>
          <exclude>application.properties</exclude>
        </excludes>
      </resource>
      <resource>
        <filtering>true</filtering>
        <directory>src/main/resources</directory>
        <!--引入环境需要的配置-->
        <includes>
          <include>application-${profileActive}.properties</include>
          <include>application.properties</include>
        </includes>
      </resource>

    </resources>

    <plugins>
      <!--maven打包时，配置manifest文件，打入依赖的jar包-->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <!--使用docker-maven-plugin插件-->
      <!-- <plugin>
         <groupId>com.spotify</groupId>
         <artifactId>docker-maven-plugin</artifactId>
         <version>${docker.maven.plugin.version}</version>

         &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;
         <executions>
           <execution>
             <id>build-image</id>
             &lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;
             <phase>package</phase>
             <goals>
               <goal>build</goal>
             </goals>
           </execution>
         </executions>

         <configuration>
           &lt;!&ndash;指定生成的镜像名&ndash;&gt;
           <imageName>opsigte/${project.artifactId}</imageName>
           &lt;!&ndash;指定标签&ndash;&gt;
           <imageTags>
             <imageTag>latest</imageTag>
           </imageTags>
           &lt;!&ndash; 指定 Dockerfile 路径&ndash;&gt;
           <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>

           &lt;!&ndash;指定远程 docker api地址&ndash;&gt;
           <dockerHost>http://192.168.1.137:2375</dockerHost>

           &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;
           <resources>
             <resource>
               <targetPath>/</targetPath>
               &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;
               <directory>${project.build.directory}</directory>
               &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;
               <include>${project.build.finalName}.jar</include>
             </resource>
           </resources>
         </configuration>
       </plugin>-->

    </plugins>

  </build>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
      <scope>provided</scope>
    </dependency>

    <!--项目jar依赖-->
    <dependency>
      <groupId>com.opsigte</groupId>
      <artifactId>e-common</artifactId>
      <version>${e-common.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opsigte</groupId>
      <artifactId>e-common-config</artifactId>
      <version>${e-common-config.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opsigte</groupId>
      <artifactId>e-common-core</artifactId>
      <version>${e-common-core.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opsigte</groupId>
      <artifactId>e-user-api</artifactId>
      <version>${e-user-api.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opsigte</groupId>
      <artifactId>e-order-api</artifactId>
      <version>${e-order-api.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opsigte</groupId>
      <artifactId>e-cache-api</artifactId>
      <version>${e-cache-api.version}</version>
    </dependency>


    <!--第三方jar依赖-->
    <dependency>
      <groupId>com.alibaba.boot</groupId>
      <artifactId>dubbo-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
    </dependency>
    <!--<dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-swagger-ui</artifactId>
    </dependency>-->
    <dependency>
      <groupId>com.github.xiaoymin</groupId>
      <artifactId>swagger-bootstrap-ui</artifactId>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt</artifactId>
    </dependency>

    <dependency>
      <groupId>eu.bitwalker</groupId>
      <artifactId>UserAgentUtils</artifactId>
    </dependency>
  </dependencies>

</project>
